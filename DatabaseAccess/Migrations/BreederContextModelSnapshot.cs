// <auto-generated />
using DatabaseAccess.Data;
using DatabaseAccess.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DatabaseAccess.Migrations
{
    [DbContext(typeof(BreederContext))]
    partial class BreederContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseAccess.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BreedId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Breed");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ColorId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetId");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<Guid>("BreedId");

                    b.Property<Guid>("ColorId");

                    b.Property<Guid?>("DamId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAdult");

                    b.Property<bool>("IsForSale");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<double>("Price");

                    b.Property<Guid?>("SirId");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DamId");

                    b.HasIndex("SirId");

                    b.HasIndex("StatusId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhotoId");

                    b.Property<string>("FileLink")
                        .HasMaxLength(500);

                    b.Property<string>("FileName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsKeyPhoto");

                    b.Property<int>("Order");

                    b.Property<Guid>("PetId");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VideoId");

                    b.Property<string>("FileName")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<Guid>("PetId");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Pet", b =>
                {
                    b.HasOne("DatabaseAccess.Entities.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatabaseAccess.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatabaseAccess.Entities.Pet", "Dam")
                        .WithMany()
                        .HasForeignKey("DamId");

                    b.HasOne("DatabaseAccess.Entities.Pet", "Sir")
                        .WithMany()
                        .HasForeignKey("SirId");

                    b.HasOne("DatabaseAccess.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Photo", b =>
                {
                    b.HasOne("DatabaseAccess.Entities.Pet", "Pet")
                        .WithMany("Photos")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseAccess.Entities.Video", b =>
                {
                    b.HasOne("DatabaseAccess.Entities.Pet", "Pet")
                        .WithMany("Videos")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
